
module Pod
  module Downloader

    require 'cocoapods-downloader/api'
    require 'cocoapods-downloader/api_exposable'
    require 'cocoapods-downloader/base'

    # @return [String] Downloaderâ€™s version, following
    #         [semver](http://semver.org).
    #
    VERSION = '0.1.0'

    # @return [Downloader::Base] A concrete downloader according to the
    #         options.
    #
    # @todo   Each downloaders class should report the accepted options.
    # @todo   Improve the common support for the cache in Base and add specs.
    # @todo   Find a way to switch to GitHub tarballs if no cache is used. Have
    #         global options for the Downloader cache?
    # @todo   Find a better name for this method.
    #
    def self.for_target(target_path, options)
      require 'cocoapods-downloader/git'
      require 'cocoapods-downloader/mercurial'
      require 'cocoapods-downloader/subversion'
      require 'cocoapods-downloader/http'

      if target_path.nil?
        raise DownloaderError, "No target path provided."
      end

      if options.nil? || options.empty?
        raise DownloaderError, "No source url provided."
      end

      options = options.dup
      if url = options.delete(:git)     then klass = Git
      elsif url = options.delete(:hg)   then klass = Mercurial
      elsif url = options.delete(:svn)  then klass = Subversion
      elsif url = options.delete(:http) then klass = Http
      end

      unless klass
        raise DownloaderError, "Unsupported download strategy `#{options.inspect}`."
      end

      if klass == Git && url.to_s =~ /github.com/
        klass = GitHub
      end

      klass.new(target_path, url, options)
    end

    # Denotes the error generated by a Downloader
    #
    class DownloaderError < StandardError; end

  end
end
